<?php
/**
 * Front module for Craft CMS 3.x
 *
 * Front integration
 *
 * @link      https://craftcms.com
 * @copyright Copyright (c) 2019 Luke Holder
 */

namespace modules\frontmodule\controllers;

use Craft;
use craft\web\Controller;
use yii\web\Response;

/**
 * @author    Luke Holder
 * @package   FrontModule
 * @since     1
 */
class FrontController extends Controller
{

    // Protected Properties
    // =========================================================================

    /**
     * @var    bool|array Allows anonymous access to this controller's actions.
     *         The actions must be in 'kebab-case'
     * @access protected
     */
    protected $allowAnonymous = true;

    /**
     * @inheritdoc
     */
    public $enableCsrfValidation = false;

    // Public Methods
    // =========================================================================

    public function beforeAction($action)
    {
        $headers = Craft::$app->getResponse()->getHeaders();
        $headers->set('X-Frame-Options', 'allow-from https://app.frontapp.com');
        $request = Craft::$app->getRequest();
        $authSecret = $request->getQueryParam('auth_secret');

        $secureOn = false; // change this in dev etc.

        if ($secureOn) {
            if (!$authSecret || !hash_equals($authSecret, getenv('FRONT_AUTH_SECRET'))) {
                return $this->renderTemplate('front-module/not-allowed.twig', []);
            }
        }

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * This is the main sidebar page in front
     *
     * @return mixed
     */
    public function actionIndex()
    {
        return $this->renderTemplate('front-module/index.twig', []);
    }

    /**
     * @return Response
     */
    public function actionGetLicenseInfo()
    {
        $request = Craft::$app->getRequest();
        $key = $request->getParam('key');

        if (!$key) // TODO (or key not found in DB.)
        {
            return $this->asErrorJson('Key not found');
        }

        $data = [];
        // TODO populate key info with real data from lookup
        $data['keyInfo'] = [
            'edition' => 'pro'
        ];
        $data['success'] = true;
        return $this->asJson($data);
    }

    public function actionScrubConversation(): Response
    {
        $conversationId = Craft::$app->getRequest()->getRequiredBodyParam('conversationId');
        $token = getenv('FRONT_TOKEN');

        // request conversation details
        //
        $data['success'] = true;

        return $this->asJson($data);
    }
}
