{% extends "_layouts/cp" %}
{% import "_includes/forms" as forms %}

{% set crumbs = [
    {label: 'Plugins', url: url('plugins')}
] %}

{% set fullPageForm = true %}
{% set saveShortcutRedirect = 'plugins/{id}-{handle}' %}


{% block actionButton %}
    <div class="btngroup">
        <input type="submit" class="btn submit" value="Save">

        <div class="btn submit menubtn"></div>
        <div class="menu">
            <ul>
                <li><a class="formsubmit" data-redirect="{{ saveShortcutRedirect|hash }}">
                        {{ forms.optionShortcutLabel('S') }}
                        Save and continue editing
                    </a></li>
                <li><a class="formsubmit" data-redirect="{{ ('plugins/new')|hash }}">Save and add another</a></li>
            </ul>
            {% if plugin.id %}
                <hr>
                <ul>
                    <li><a class="formsubmit error" data-action="craftcom/plugins/delete" data-confirm="Are you sure you want to delete this plugin?" data-redirect="{{ 'plugins'|hash }}">Delete</a></li>
                </ul>
            {% endif %}
        </div>
    </div>
{% endblock %}


{% block content %}
    <input type="hidden" name="action" value="craftcom/plugins/save">
    <input type="hidden" name="redirect" value="{{ 'plugins/{id}'|hash }}">
    {% if plugin.id %}<input type="hidden" name="pluginId" value="{{ plugin.id }}">{% endif %}

    <div id="fields">
        {% set repositoryInput = forms.text({
            id: 'repository',
            name: 'repository',
            value: plugin.repository,
            errors: plugin.getErrors('repository'),
            placeholder: 'http://github.com/...',
            type: 'url',
            autofocus: true,
        }) %}
        {% if not plugin.id %}
            {% set repositoryInput %}
                <div class="flex" style="position: relative;">
                    <div class="flex-grow">{{ repositoryInput }}</div>
                    <input id="load-details" class="btn" type="button" value="Load Details">
                    <div id="load-details-spinner" class="spinner hidden" style="position: absolute; top: 0; right: -24px;"></div>
                </div>
            {% endset %}
        {% endif %}

        {{ forms.field({
            label: 'Repository URL',
            required: true,
            id: 'repository',
        }, repositoryInput) }}

        {{ forms.textField({
            label: 'Plugin Name',
            required: true,
            id: 'name',
            name: 'name',
            value: plugin.name,
            errors: plugin.getErrors('name'),
        }) }}

        {{ forms.textField({
            label: 'Package Name',
            required: true,
            id: 'packageName',
            name: 'packageName',
            value: plugin.packageName,
            errors: plugin.getErrors('packageName'),
        }) }}

        {{ forms.textField({
            label: 'Plugin Handle',
            required: true,
            id: 'handle',
            name: 'handle',
            value: plugin.handle,
            errors: plugin.getErrors('handle'),
            class: 'code',
        }) }}

        {{ forms.elementSelectField({
            label: 'Icon',
            id: 'iconId',
            name: 'iconId',
            elementType: 'craft\\elements\\Asset',
            criteria: {kind: 'image'},
            limit: 1,
            elements: plugin.iconId ? [plugin.getIcon()] : null,
        }) }}

        {{ forms.elementSelectField({
            label: 'Categories',
            id: 'categoryIds',
            name: 'categoryIds',
            elementType: 'craft\\elements\\Category',
            elements: plugin.getCategories(),
            required: true,
            errors: plugin.getErrors('categories'),
        }) }}

        {{ forms.elementSelectField({
            label: 'Screenshots',
            id: 'screenshotIds',
            name: 'screenshotIds',
            elementType: 'craft\\elements\\Asset',
            criteria: {kind: 'image'},
            elements: plugin.getScreenshots(),
        }) }}

        {{ forms.textareaField({
            label: 'Short Description',
            id: 'shortDescription',
            name: 'shortDescription',
            value: plugin.shortDescription,
            errors: plugin.getErrors('shortDescription'),
            class: 'nicetext',
            rows: 2,
        }) }}

        {{ forms.textareaField({
            label: 'Long Description',
            id: 'longDescription',
            name: 'longDescription',
            value: plugin.longDescription,
            errors: plugin.getErrors('longDescription'),
            class: 'nicetext',
            rows: 4,
        }) }}

        {{ forms.textField({
            label: 'Documentation URL',
            id: 'documentationUrl',
            name: 'documentationUrl',
            value: plugin.documentationUrl,
            errors: plugin.getErrors('documentationUrl'),
            type: 'url',
        }) }}

        {{ forms.textField({
            label: 'Changelog Path',
            id: 'changelogPath',
            name: 'changelogPath',
            value: plugin.changelogPath,
            errors: plugin.getErrors('changelogPath'),
            type: 'url',
        }) }}
    </div>
{% endblock %}

{% block details %}
    <div id="settings" class="meta">
        {{ forms.elementSelectField({
            first: true,
            label: 'Developer',
            required: true,
            id: 'developerId',
            name: 'developerId',
            elementType: 'craft\\elements\\User',
            sources: ['group:'~(craft.app.userGroups.getGroupByHandle('developers').id)],
            limit: 1,
            elements: plugin.developerId ? [plugin.getDeveloper()] : null,
            errors: plugin.getErrors('developerId'),
        }) }}

        {{ forms.selectField({
            label: 'License',
            id: 'license',
            name: 'license',
            options: [
            {label: 'Craft', value: 'craft'},
            {label: 'MIT', value: 'mit'},
            ],
            value: plugin.license,
            errors: plugin.getErrors('license'),
        }) }}

        {{ forms.textField({
            label: 'Price',
            id: 'price',
            name: 'price',
            value: (plugin.price)|number_format(2, '.', ''),
            errors: plugin.getErrors('price'),
        }) }}

        {{ forms.textField({
            label: 'Renewal Price',
            id: 'renewalPrice',
            name: 'renewalPrice',
            value: (plugin.renewalPrice)|number_format(2, '.', ''),
            errors: plugin.getErrors('renewalPrice'),
        }) }}

        {{ forms.lightswitchField({
            label: 'Enabled',
            id: 'enabled',
            name: 'enabled',
            on: plugin.enabled
        }) }}
    </div>
{% endblock %}

{% js %}
    {% if not plugin.repository %}
        new Craft.DynamicGenerator('#package-name', '#repository', function(sourceVal) {
            return 'http://github.com/'+sourceVal;
        });
    {% endif %}
    {% if not plugin.id %}
        $('#load-details').on('click', function() {
            var url = $('#repository').val();
            if (!url) {
                return;
            }
            $('#load-details-spinner').removeClass('hidden');
            Craft.postActionRequest('craftcom/plugins/load-details?repository='+encodeURIComponent(url), function(response, textStatus) {
                $('#load-details-spinner').addClass('hidden');
                if (textStatus === 'success') {
                    if (response.error) {
                        alert(response.error);
                        return;
                    }
                    for (var id in response) {
                        if (response[id] !== null) {
                            if (id === 'icon') {
                                var elementInfo = Craft.getElementInfo(response[id]);
                                var elementSelect = $('#iconId').data('elementSelect');
                                var $element = elementSelect.createNewElement(elementInfo);
                                elementSelect.resetElements();
                                elementSelect.appendElement($element);
                                elementSelect.addElements($element);
                            } else {
                                $('#'+id).val(response[id]).trigger('change');
                            }
                        }
                    }
                }
            });
        });
    {% endif %}
    {% if not plugin.handle %}
        new Craft.DynamicGenerator('#package-name', '#handle', function(sourceVal) {
            return sourceVal.replace(/^[^\/]*\/?/, '');
        });
    {% endif %}
    {% if not plugin.renewalPrice %}
        new Craft.DynamicGenerator('#price', '#renewal-price', function(sourceVal) {
            return !isNaN(sourceVal) ? sourceVal*0.2 : '';
        });
    {% endif %}
{% endjs %}
